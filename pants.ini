# Pants config for Foursquare Fsq.io

[DEFAULT]

# The pants_version value is only used in Fsq.io, although checked on each run everywhere.
pants_version: 0.0.63

pythonpath: [
    "%(buildroot)s/src/python",
  ]

backend_packages: [
    'fsqio.pants',
  ]

pants_workdir: %(buildroot)s/.pants.d
pants_supportdir: %(buildroot)s/build-support
pants_distdir: %(buildroot)s/dist
pex_products_cachedir: %(buildroot)s/.pex
info_dir: %(pants_workdir)s/runs
pants_pythons: %(buildroot)s/.python
confs: ['default']
max_subprocess_args: 100
scala_workdir: %(pants_workdir)s/compile/scala
java_workdir: %(pants_workdir)s/compile/java
thrift_workdir: %(pants_workdir)s/compile/custom-thrift

scala_compile: scala-compile-2.10.4

kill_nailguns: True

# Mixed into all cache keys. Bump this to invalidate all existing artifacts.
# We are using timestamps for cache keys. To bump it run `date +%Y-%m-%d:%H:%M:%S` and paste in the output.
cache_key_gen_version: '2015-12-23:17:54:45'

less_mem_opts: [
  '-Xmx4g',
  ]

more_mem_opts: [
  '-Xmx6g',
  ]

super_mem_opts: [
  '-Xmx12g',
  ]

debug_opts: [
  '-Xverify:none',
  '-Xdebug',
  '-Xnoagent',
  '-Djava.compiler=NONE',
  '-Xrunjdwp:transport=dt_socket,address=4000,server=y,suspend=y',
  ]

zinc_opts: [
    '-Dzinc.analysis.cache.limit=1000',
    '-Xmx8g',
    '-XX:+UseG1GC',
  ]

local_artifact_cache_path: %(buildroot)s/.local_artifact_cache/

local_artifact_caches: ["%(local_artifact_cache_path)s"]
all_artifact_caches: [
    "%(local_artifact_cache_path)s",
  ]

# TODO: This should really be a whitelist, or based off of source roots.
# For now a long exclusion list bypasses most major issues.
spec_excludes: [
    '%(buildroot)s/dist',
    '%(buildroot)s/out',
    '%(pants_workdir)s',
    '.git',
    '.gitshed',
    '.local_artifact_cache',
    '.pants.bootstrap',
    '.pants.bootstrap',
    '.pants.d',
    '.pantsenv',
    '.pids',
    '.pvenvs',
    '.wheelhouse',
    'api',
    'dependencies',
    'dist',
    'etc',
    'log',
    'mongo-testdb',
    'scripts',
    'target',
    'yourkit',
  ]


# Override these in each section, as appropriate, using the values above.
[cache]
read_from: []
write_to: []


[reporting]
# This cuts down on the verbosity of pants output
# Comment out these lines to see warnings and other output
console_label_format: {
    'COMPILER' : 'SUPPRESS',
  }
console_tool_output_format: {
    'COMPILER' : 'SUPPRESS',
  }


[jvm-platform]
default_platform: java8
platforms: {
    'java8': {'source': '8', 'target': '8', 'args': [] },
  }


[cache.bootstrap]
# The just-in-time tool shading performed by jvm tool bootstrapping is very expensive, so we turn
# on artifact caching for it that can survive clean-all.
read_from = %(local_artifact_caches)s
write_to = %(local_artifact_caches)s


[binaries]
# Use upstream pants bintray for opensource repos.
baseurls: [
    'https://dl.bintray.com/pantsbuild/maven/',
  ]


[goals]
logdir: /tmp/%(user)s/goals


[tasks]
build_invalidator: %(pants_workdir)s/build_invalidator


[ivy]
ivy_settings: %(pants_supportdir)s/ivy/opensource_ivysettings.xml
cache_dir: %(homedir)s/.ivy2/cache


[resolve.ivy]
transitive: True
jvm_args: %(more_mem_opts)s
args: []


[cache.resolve.ivy]
read_from = %(local_artifact_caches)s
write_to = %(local_artifact_caches)s


[thrift-binary]
supportdir: thrift
version: 0.9.1


[gen.thrift]
gen_options: hashcode
deps: ['3rdparty:thrift-0.9.0']
service_deps: ['3rdparty:thrift-0.9.0']
strict: False
verbose: False


[gen.thrift-python]
gen_options: newstyle
deps: ['3rdparty/python:thrift']
service_deps: ['3rdparty/python:thrift']
strict: False
verbose: False


[gen.spindle]
jvm_options: %(less_mem_opts)s
thrift_include: ['%(buildroot)s/src/thrift', '%(buildroot)s/test/thrift']
scala_ssp_template: ['src/resources/io/fsq/ssp/codegen/scala']
java_ssp_template: ['src/resources/io/fsq/ssp/codegen/javagen']
spindle_codegen_binary: ['src/jvm/io/fsq/spindle/codegen/binary:spindle']
args: []
runtime_dependency: [
    '3rdparty:thrift',
    '3rdparty:finagle',
    '3rdparty:fscommon-thrift',
    '3rdparty:mongodb',
    '3rdparty:joda-time',
    'src/jvm/io/fsq/spindle/runtime',
  ]


[cache.gen.spindle]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s


[build-spindle]
spindle_codegen_binary: ['src/jvm/io/fsq/spindle/codegen/binary:spindle']


[cache.build-spindle]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s


[gen.soy]
jvm_options: %(less_mem_opts)s
runtime_deps: [
    '3rdparty:closure-templates',
    '3rdparty:fscommon-thrift',
    '3rdparty:thrift',
    'src/jvm/io/fsq/spindle/runtime',
  ]


[cache.gen.soy]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s


[scala-platform]
runtime: ['3rdparty:scala-library-2.10.4']
scalac: //:scala-compile-2.10.4

spec_excludes: [
    '%(pants_workdir)s',
    '%(buildroot)s/dist',
    '%(buildroot)s/out',
  ]


[compile.java]
use_jmake: False


[compile.zinc]
# If you are changing any compile options for zinc or java you MUST bump the cache key!
strategy: isolated
worker_count: 4
name_hashing: False
#TODO DENORM:
jvm_options: [
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8',
    '-Djava.awt.headless=true',
    '-XX:+AggressiveOpts',
    '-XX:+UseCompressedOops',
    '-Xss4096k',
    '-server',
    '-Dscalac.patmat.analysisBudget=off',
    '-Dzinc.analysis.cache.limit=1000',
    '-Xmx8g',
    '-XX:+UseG1GC',
    '-XX:+PrintGCDetails',
    '-XX:+PrintGCTimeStamps',
  ]
warning_args: []
no_warning_args: [
    '-S-nowarn',
  ]

# If only a few targets are changed locally, attempt to chunk such that unchanged deps of
# local changes are attempted first, in a different chunk.
# This isolates changed targets in their own chunk based on assumption that local changes
# are more likely to fail to compile requiring a reattempt of their chunk, but ideally not of
# the deps, since they succeeded, as a chunk, first.
locally_changed_targets_heuristic_limit = 10
zinc: //:zinc
# TODO: Write to caches (or at least local cache) once editing-while-building doesn't cause issues.
args: [
    '-S-encoding', '-SUTF-8',
    '-S-deprecation',
    '-S-unchecked',
    '-S-feature',
    '-S-Xfatal-warnings',
    '-S-g:vars',
    '-S-language:existentials',
    '-S-language:implicitConversions',
    '-S-language:reflectiveCalls',
    '-S-language:postfixOps',
    '-S-language:higherKinds',
  ]


[cache.compile.zinc]
read_from = %(all_artifact_caches)s
write_to = []


[jvm]
debug_args: %(debug_opts)s


[repl.scala]
scala_repl: //:scala-repl-2.10.4


[repl-dirty.scala-dirty]
scala_repl: //:scala-repl-2.10.4


[jar-tool]
jvm_options: ['-Xms2g','-Xmx2g', '-Djava.io.tmpdir=%(pants_workdir)s']


[publish.jar]
jvm_options: []
# This is a dummy repo and is unused by Foursquare.
repos = {
  'dummy_repo': {
    'resolver': 'nowhere',
    'confs': ['noone', 'nohow'],
  },
 }


[idea]
classes_conf: default
sources_conf: sources
extra_jvm_source_paths = []
extra_jvm_test_paths = ['tests/resources']
python_source_paths: ['src/python']
python_test_paths: ['tests/python']
python_lib_paths: ['3rdparty/python']
scala_compiler_profile: scala-compile-2.8.1
scala_compile_profile: scala-compile-2.8.1


[cache.map-third-party-jar-symbols]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s


[pom-resolve]
maven_repos: [
    {'geotools':'http://download.osgeo.org/webdav/geotools'},
    {'maven': 'https://repo.maven.apache.org/maven2'},
    {'twitter': 'https://maven.twttr.com'},
    {'jnegre': 'https://bintray.com/artifact/download/jnegre/maven'},
    {'con-jars': 'http://conjars.org/repo'},
    {'concord': 'http://source.concord.org/nexus/content/groups/public'},
  ]

global_exclusions = [
    ('commons-logging', 'commons-logging'),
    ('org.slf4j', 'slf4j-log4j12'),
    ('org.slf4j', 'slf4j-jdk14'),
    ('log4j', 'log4j'),

    # we want only the version of jetty that we explicitly include.
    ('org.mortbay.jetty', 'jetty'),
    ('org.mortbay.jetty', 'jetty-util'),

    # NOTE: if you need jruby then make sure to exclude it from the hbase jar.
    # The issue that caused this exclude was an out-of-date version of jodatime bundled
    # within jruby, manifesting as a compile error.
    ('org.jruby', 'jruby-complete'),

    # Exclude old Netty versions with different groupId/artifactId's.
    ('org.jboss.netty', 'netty'),

    # NOTE: A transitive dependency of scalding-{core,commons} pulls in
    # org.ow2.asm/asm-4.0, which has a different organization than the 3.x
    # asm versions and thus gets pulled in alongside asm-3.x.
    # This causes an order-dependent classpath conflict which in turn
    # interferes with reflection in hadoop classloading tests.
    ('org.ow2.asm', 'asm'),

    # Lots of things depend on these, but they are MR1 so we should avoid them.
    # They should be subsumed by the replacements in hadoop-common
    # and hadoop-mapreduce-client-core
    ('org.apache.hadoop', 'hadoop-core'),
  ]

global_pinned_versions = {
    ('asm', 'asm'): '3.3.1',
    ('asm', 'asm-commons'): '3.3.1',
    ('asm', 'asm-tree'): '3.3.1',
    ('asm', 'asm-util'): '3.3.1',
    ('com.fasterxml.jackson.core', 'jackson-annotations'): '2.4.2',
    ('com.fasterxml.jackson.core', 'jackson-core'): '2.4.2',
    ('com.fasterxml.jackson.core', 'jackson-databind'): '2.4.2',
    ('com.google.code.findbugs', 'jsr305'): '2.0.3',
    ('com.google.code.gson', 'gson'): '2.2.2',
    ('com.googlecode.javaewah', 'JavaEWAH'): '0.6.6',
    ('com.hadoop.gplcompression', 'hadoop-lzo'): '0.4.19',
    ('com.sun.jersey', 'jersey-core'): '1.9',
    ('com.sun.jersey', 'jersey-server'): '1.9',
    ('com.sun.xml.bind', 'jaxb-impl'): '2.2.3-1',
    ('com.thoughtworks.paranamer', 'paranamer'): '2.6',
    ('com.twitter', 'chill_2.10'): '0.5.2',
    ('com.twitter', 'chill-java'): '0.5.2',
    ('com.twitter', 'util-core_2.10'): '6.24.0',
    ('com.twitter', 'util-jvm_2.10'): '6.24.0',
    ('com.twitter', 'util-logging_2.10'): '6.24.0',
    ('com.twitter.common', 'application-action'): '0.0.66',
    ('com.twitter.common', 'args'): '0.2.6',
    ('com.twitter.common', 'args-apt'): '0.1.6',
    ('com.twitter.common', 'args-core'): '0.1.7',
    ('com.twitter.common', 'base'): '0.0.82',
    ('com.twitter.common', 'collections'): '0.0.69',
    ('com.twitter.common', 'dynamic-host-set'): '0.0.41',
    ('com.twitter.common', 'io'): '0.0.51',
    ('com.twitter.common', 'io-json'): '0.0.39',
    ('com.twitter.common', 'io-thrift'): '0.0.48',
    ('com.twitter.common', 'net-util'): '0.0.76',
    ('com.twitter.common', 'quantity'): '0.0.66',
    ('com.twitter.common', 'service-thrift'): '1.0.42',
    ('com.twitter.common', 'stat'): '0.0.26',
    ('com.twitter.common', 'util'): '0.0.92',
    ('com.twitter.common', 'util-system-mocks'): '0.0.67',
    ('com.twitter.common.zookeeper', 'client'): '0.0.53',
    ('com.twitter.common.zookeeper', 'group'): '0.0.67',
    ('com.twitter.common.zookeeper', 'server-set'): '1.0.72',
    ('com.twitter', 'scrooge-core_2.10'): '3.12.3',
    ('com.yammer.metrics', 'metrics-core'): '2.2.0',
    ('commons-beanutils', 'commons-beanutils'): '1.8.3',
    ('commons-codec', 'commons-codec'): '1.6',
    ('commons-pool', 'commons-pool'): '1.6',
    ('hsqldb', 'hsqldb'): '1.8.0.10',
    ('javax.servlet', 'servlet-api'): '2.5',
    ('javax.xml.bind', 'jaxb-api'): '2.2.2',
    ('org.apache.avro', 'avro'): '1.7.4',
    ('org.apache.httpcomponents', 'httpcore'): '4.3.2',
    ('org.apache.commons', 'commons-math3'): '3.4.1',
    ('org.clapper', 'grizzled-scala_2.10'): '1.3',
    ('org.hamcrest', 'hamcrest-core'): '1.2',
    ('org.javassist', 'javassist'): '3.18.1-GA',
    ('org.scalamacros', 'quasiquotes_2.10'): '2.0.1',
    ('org.scala-lang.modules', 'scala-async_2.10'): '0.9.5',
    ('org.tukaani', 'xz'): '1.0',
    ('xerces', 'xercesImpl'): '2.8.1',
    ('xml-apis', 'xml-apis'): '1.3.04',

    ('org.codehaus.jackson', 'jackson-jaxrs'): '1.8.8',

    # Make sure we always pin to the correct minor version of scala provided deps.
    ('org.scala-lang', 'scala-compiler'): '2.10.4',
    ('org.scala-lang', 'scala-library'): '2.10.4',
    ('org.scala-lang', 'scala-reflect'): '2.10.4',
    ('org.scala-lang', 'scalap'): '2.10.4',

    ('org.apache.velocity', 'velocity'): '1.7',
    ('com.sun.jersey', 'jersey-json'): '1.14',
    ('org.codehaus.jackson', 'jackson-jaxrs'): '1.9.2',
    ('org.codehaus.jackson', 'jackson-jaxrs'): '1.9.2',
    ('org.apache.hadoop', 'hadoop-annotations'): '2.6.0',
    ('com.google.protobuf', 'protobuf-java'): '2.5.0',

    ('org.codehaus.janino', 'commons-compiler'): '2.7.8',

    ('commons-collections', 'commons-collections'): '3.2.1',
    ('commons-digester', 'commons-digester'): '1.8',
  }

# For advanced users, if you are testing new jars built entirely locally, add the jar coordinates to this
# map with the local file location where the override jar lives.
local_override_versions = {
    # Example:
    # ('io.fsq', 'spindle-runtime_2.10', '3.0.0-M7'): '/path/to/artifact.jar'
  }


[cache.pom-resolve]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s
