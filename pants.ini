
# buildroot, homedir and user are assumed to be seeded in the config

[DEFAULT]
# Look for these rcfiles - they need not exist on the system
rcfiles: ['/etc/pantsrc', '~/.pants.new.rc']
backend_packages: [
    # TODO(pl): Re-enable this when we get the upstream spindle plugin
    # fixed instead of having it forked out in our repo.
    # 'pants.contrib.spindle',
    'foursquare.pants',
  ]
pants_bootstrapdir: %(buildroot)s/.pants.bootstrap
pants_cachedir: %(pants_bootstrapdir)s/cachedir
pants_workdir: %(buildroot)s/.pants.d
pants_supportdir: %(buildroot)s/build-support
pants_distdir: %(buildroot)s/dist
pex_products_cachedir: %(buildroot)s/.pex
info_dir: %(pants_workdir)s/runs
pants_pythons: %(buildroot)s/.python
confs: ['default']
max_subprocess_args: 100
scala_workdir: %(pants_workdir)s/compile/scala
java_workdir: %(pants_workdir)s/compile/java
thrift_workdir: %(pants_workdir)s/compile/custom-thrift

scala_compile: scala-compile-2.10.4

kill_nailguns: True

local_artifact_cache_path: %(buildroot)s/.local_artifact_cache/
remote_artifact_cache_path: http://10.1.5.13

local_artifact_caches: ["%(local_artifact_cache_path)s"]
remote_artifact_caches: ["%(remote_artifact_cache_path)s"]
all_artifact_caches: [
    "%(local_artifact_cache_path)s",
    "%(remote_artifact_cache_path)s"
  ]

# Mixed into all cache keys. Bump this to invalidate all existing artifacts.
# Note: If you want to experiment with this locally without affecting artifacts
# read by all, change it to some other string, e.g., <number>-<your username>.
cache_key_gen_version: '852-johng'

# TODO(pl): This should really be a whitelist, or based off of source roots.
# For now a long exclusion list bypasses most major issues.
spec_excludes: [
    '%(buildroot)s/dist',
    '%(buildroot)s/out',
    '%(pants_workdir)s',
    '.git',
    '.gitshed',
    '.local_artifact_cache',
    '.pants.bootstrap',
    '.pants.bootstrap',
    '.pants.d',
    '.pantsenv',
    '.pids',
    '.pvenvs',
    '.wheelhouse',
    'api',
    'dependencies',
    'dist',
    'etc',
    'log',
    'mongo-testdb',
    'scripts',
    'target',
    'yourkit',
  ]

# TODO(benjy): Which of these are really neccessary? We ran SBT with them, but that may be partly in order
# to run a jetty. Do we really need to run the compiler with these?
basic_opts: [
  '-Duser.timezone=UTC',
  '-Dfile.encoding=UTF-8',
  '-Djava.awt.headless=true',
  '-XX:+AggressiveOpts',
  '-XX:+UseCompressedOops',
  '-Xss4096k',
  '-server',
  '-Dscalac.patmat.analysisBudget=off',
  ]

less_mem_opts: [
  '-Xmx4g',
  '-XX:MaxPermSize=1g'
  ]

more_mem_opts: [
  '-Xmx6g',
  '-XX:MaxPermSize=2g',
  ]

super_mem_opts: [
  '-Xmx12g',
  ]

# TODO(pl): DENORM_TODO(basic_opts)
dev_opts: [
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8',
    '-Djava.awt.headless=true',
    '-XX:+AggressiveOpts',
    '-XX:+UseCompressedOops',
    '-Xss4096k',
    '-server',
    '-Dscalac.patmat.analysisBudget=off',
    '-Dmongo.connectionsPerHost=4',
    '-Dmongo.threadsAllowedToBlockForConnectionMultiplier=10',
    '-noverify',
    '-Dlogback.configurationFile=props/default.logback.xml',
    '-XX:ReservedCodeCacheSize=512m',
  ]

# TODO(pl): DENORM_TODO(dev_opts)
test_opts: [
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8',
    '-Djava.awt.headless=true',
    '-XX:+AggressiveOpts',
    '-XX:+UseCompressedOops',
    '-Xss4096k',
    '-server',
    '-Dscalac.patmat.analysisBudget=off',
    '-Dmongo.connectionsPerHost=4',
    '-Dmongo.threadsAllowedToBlockForConnectionMultiplier=10',
    '-noverify',
    '-Dlogback.configurationFile=props/default.logback.xml',
    '-XX:ReservedCodeCacheSize=512m',
    '-Drun.mode=test',
    '-Dmongo.connectionsPerHost=10',
    '-Dmongo.threadsAllowedToBlockForConnectionMultiplier=10',
    '-Dlogback.configurationFile=props/test.default.logback.xml',
    '-Djava.security.manager',
    '-Djava.security.policy=tests.policy',
    '-Dconfig.file=./src/resources/config/test.conf',
    '-Drun.mode=test',
    '-Xmx6g',
    '-XX:MaxPermSize=2g'
  ]

debug_opts: [
  '-Xverify:none',
  '-Xdebug',
  '-Xnoagent',
  '-Djava.compiler=NONE',
  '-Xrunjdwp:transport=dt_socket,address=4000,server=y,suspend=y',
  ]

zinc_opts: [
    '-Dzinc.analysis.cache.limit=1000',
    '-Xmx8g',
    '-XX:+UseG1GC',
  ]

# TODO(pl): See DENORM_TODO
# banned_expensive_targets: [
#     '3rdparty',
#     'experimental',
#     'oneoff',
#     'src/jvm/com/foursquare/hadoop/hive/serde',
#     'src/jvm/com/foursquare/hadoop/thriftmodelutil',
#   ]

[reporting]
# This cuts down on the verbosity of pants output
# Comment out these lines to see warnings and other output
console_label_format: {
    'COMPILER' : 'SUPPRESS',
  }
console_tool_output_format: {
    'COMPILER' : 'SUPPRESS',
  }

[jvm-platform]
default_platform: java7
platforms: {
    'java7': {'source': '7', 'target': '7', 'args': [] },
    'java8': {'source': '8', 'target': '8', 'args': [] },
  }

[cache.bootstrap]
# The just-in-time tool shading performed by jvm tool bootstrapping is very expensive, so we turn
# on artifact caching for it that can survive clean-all.
read_from = %(local_artifact_caches)s
write_to = %(local_artifact_caches)s

[binaries]
baseurls: [
    'http://bodega.prod.foursquare.com/4sq-dev/pants/bootstrap',
  ]

[run-tracker]
stats_upload_url: http://quickmon.prod.foursquare.com/uploadpantsreport

[resources-hack]
apply: True

[goals]
logdir: /tmp/%(user)s/goals
bootstrap_buildfiles: [
    '%(pants_supportdir)s/BUILD.bootstrap',
  ]

# Override these in each section, as appropriate, using the values above.
[cache]
read_from: []
write_to: []


[tasks]
build_invalidator: %(pants_workdir)s/build_invalidator


[reporting]
reports_dir: %(pants_workdir)s/reports
reports_assets_dir: %(pants_supportdir)s/reporting/assets
template_dir: %(pants_supportdir)s/reporting/templates
reporting_port: 7268


[ivy]
bootstrap_jar_url: http://bodega.prod.foursquare.com/4sq-dev/pants/bootstrap/ivy/ivy-2.3.0.jar
ivy_settings: %(pants_supportdir)s/ivy/ivysettings.xml
cache_dir: %(homedir)s/.ivy2/cache

[cache.resolve.ivy]
read_from = %(local_artifact_caches)s
write_to = %(local_artifact_caches)s

[resolve.ivy]
transitive: True
jvm_args: %(more_mem_opts)s
args: []


[thrift-binary]
supportdir: thrift
version: 0.9.1

[gen.thrift]
gen_options: hashcode
deps: ['3rdparty:thrift-0.9.0']
service_deps: ['3rdparty:thrift-0.9.0']
strict: False
verbose: False

[gen.thrift-python]
gen_options: newstyle
deps: ['3rdparty/python:thrift']
service_deps: ['3rdparty/python:thrift']
strict: False
verbose: False

[gen.spindle]
jvm_options: %(less_mem_opts)s
thrift_include: ['%(buildroot)s/src/thrift', '%(buildroot)s/test/thrift']
scala_ssp_template: ['src/resources/io/fsq/ssp/codegen/scala']
java_ssp_template: ['src/resources/io/fsq/ssp/codegen/javagen']
spindle_codegen_binary: ['src/jvm/io/fsq/spindle/codegen/binary:spindle']
args: []
runtime_dependency: [
    '3rdparty:thrift',
    '3rdparty:finagle',
    '3rdparty:fscommon-thrift',
    '3rdparty:mongodb',
    '3rdparty:joda-time',
    'src/jvm/io/fsq/spindle/runtime',
  ]

[build-spindle]
scala_ssp_template: ['src/resources/io/fsq/ssp/codegen/scala']
java_ssp_template: ['src/resources/io/fsq/ssp/codegen/javagen']
spindle_codegen_binary: ['src/jvm/io/fsq/spindle/codegen/binary:spindle']

[cache.build-spindle]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s

[cache.gen.spindle]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s


[gen.soy]
jvm_options: %(less_mem_opts)s
runtime_deps: [
    '3rdparty:closure-templates',
    '3rdparty:fscommon-thrift',
    '3rdparty:thrift',
    'src/jvm/io/fsq/spindle/runtime',
  ]

[cache.gen.soy]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s


[cache.gen.js]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s

[gen.js]
runtime_deps: [
    'src/jvm/com/foursquare/js'
  ]


[scala-platform]
runtime: ['3rdparty:scala-library-2.10.4', '3rdparty:i18n-library']
scalac: //:scala-compile-2.10.4

[compile.java]
use_jmake: False

[compile.zinc]
# If you are changing any compile options for zinc or java you MUST bump the cache key!
strategy: isolated
worker_count: 4
name_hashing: False
#TODO(pl) DENORM:
# jvm_options: %(basic_opts)s + %(super_mem_opts)s + %(zinc_opts)s
jvm_options: [
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8',
    '-Djava.awt.headless=true',
    '-XX:+AggressiveOpts',
    '-XX:+UseCompressedOops',
    '-Xss4096k',
    '-server',
    '-Dscalac.patmat.analysisBudget=off',
    '-Dzinc.analysis.cache.limit=1000',
    '-Xmx8g',
    '-XX:+UseG1GC',
    '-XX:+PrintGCDetails',
    '-XX:+PrintGCTimeStamps',
  ]
warning_args: []
no_warning_args: [
    '-S-nowarn',
  ]
# Arguments for plugins. Args are only applied for active plugins, so it's safe to put
# inactive plugin args here. Type is list of pairs of [plugin name, list-of-args].
plugin_args: {
    'i18n': ['file=src/resources/translations/api.txt'],
    'lint': ['checkers:base', 'checkers:wildcardImports'],
  }
# Active plugins. Can be overridden with the --compile-zinc-plugins flag.
plugins: ['i18n','lint']
# If only a few targets are changed locally, attempt to chunk such that unchanged deps of
# local changes are attempted first, in a different chunk.
# This isolates changed targets in their own chunk based on assumption that local changes
# are more likely to fail to compile requiring a reattempt of their chunk, but ideally not of
# the deps, since they succeeded, as a chunk, first.
locally_changed_targets_heuristic_limit = 10
zinc: //:zinc
plugin_jars: //:zinc-plugin-jars
# TODO: Write to caches (or at least local cache) once editing-while-building doesn't cause issues.
args: [
    '-S-encoding', '-SUTF-8',
    '-S-deprecation',
    '-S-unchecked',
    '-S-feature',
    '-S-Xfatal-warnings',
    '-S-g:vars',
    '-S-language:existentials',
    '-S-language:implicitConversions',
    '-S-language:reflectiveCalls',
    '-S-language:postfixOps',
    '-S-language:higherKinds',
    # Set options for the javac invoked by zinc.
    # '-C-J-Xmx2g',
    '-C-source',
    '-C1.6',
    '-C-target',
    '-C1.6',
  ]


[cache.compile.zinc]
# TODO: Turn back on after we fix the CompileSetup mismatch issue.
read_from = %(all_artifact_caches)s
write_to = []

[compile.jvm-dep-check]
skip = True

[compile.lesscss]
node: %(buildroot)s/dependencies/node/bin/node
lessc: %(buildroot)s/dependencies/node_modules/less/bin/lessc


[jvm]
debug_args: %(debug_opts)s


[jvm.run.jvm]
options: %(dev_opts)s


[repl.scala]
scala_repl: //:scala-repl-2.10.4

[repl-dirty.scala-dirty]
scala_repl: //:scala-repl-2.10.4

[jvm.repl.scala]
# TODO(pl): DENORM
# options: %(dev_opts)s + [ '-Dscala.usejavacp=true' ] + [ '-DconsoleMode=true' ]
options: [
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8',
    '-Djava.awt.headless=true',
    '-XX:+AggressiveOpts',
    '-XX:+UseCompressedOops',
    '-Xss4096k',
    '-server',
    '-Dscalac.patmat.analysisBudget=off',
    '-Dmongo.connectionsPerHost=4',
    '-Dmongo.threadsAllowedToBlockForConnectionMultiplier=10',
    '-noverify',
    '-Dlogback.configurationFile=props/default.logback.xml',
    '-XX:ReservedCodeCacheSize=512m',
    '-Dscala.usejavacp=true',
    '-DconsoleMode=true',
  ]


[jvm.test.junit]
options: %(test_opts)s


[jar-tool]
jvm_options: ['-Xms2g','-Xmx2g', '-Djava.io.tmpdir=%(pants_workdir)s']


[publish.jar]
jvm_options: []
repos = {
   'internal': {
     'resolver': 'nexus.prod.foursquare.com-publish',
     'confs': ['default', 'sources'],
     'auth': 'build-support:nexus.prod.foursquare.com'
   },
   'ci': {
     'resolver': 'nexus.prod.foursquare.com-publish-ci',
     'confs': ['default', 'sources'],
     'auth': 'build-support:nexus.prod.foursquare.com'
   },
 }

[publish]
publish_local_confs = ['default', 'sources', 'docs']


[idea]
classes_conf: default
sources_conf: sources
extra_jvm_source_paths = []
extra_jvm_test_paths = ['tests/resources']
python_source_paths: ['src/python']
python_test_paths: ['tests/python']
python_lib_paths: ['3rdparty/python']
scala_compiler_profile: scala-compile-2.8.1
scala_compile_profile: scala-compile-2.8.1


[py]
# Temporary, until py stuff moves under goal.
thrift-platmap: {
    ('darwin', 'x86_64'): ['mac', '10.6', '0.9.0', 'thrift'],
    ('linux',  'x86_64'): ['linux', 'x86_64', '0.9.0', 'thrift']
  }


[python-setup]
setuptools_version: 5.4.1
wheel_version: 0.24.0
platforms: ['macosx-10.9-x86_64', 'linux-x86_64']
interpreter_requirement: CPython>=2.7,<3


[python-repos]
repos: [
    '%(buildroot)s/dependencies/pex-deps',
    '%(buildroot)s/.wheelhouse',
  ]
indexes: []

[vexsrc]
wheelhouses: [
    'http://bodega.prod.foursquare.com/4sq-dev/python/wheelhouse/2015-10-22-1710-b173bb4768',
    'http://bodega.prod.foursquare.com/4sq-dev/python/internal',
  ]


[tag]
by_prefix:  {
    'src/jvm/com/foursquare/apiserver': ['apiserver'],
    'test/jvm/com/foursquare/apiserver': ['apiserver'],
    'src/jvm/com/foursquare/apiserver/snippet': ['dependees_must_have:apiserver'],
    'src/jvm/com/foursquare/common': ['fscommon', 'dependencies_must_have:fscommon'],
    'src/thrift/com/foursquare/common': ['fscommon', 'dependencies_must_have:fscommon'],
    'test/jvm/com/foursquare/common': ['fscommon', 'dependencies_must_have:fscommon'],
    'test/thrift/com/foursquare/common': ['fscommon', 'dependencies_must_have:fscommon'],
    '3rdparty': ['exempt'],
    'test': ['tests'],
    'verification': ['tests'],
    'src': ['dependencies_cannot_have:tests'],
    'src/jvm/com/foursquare/rec/server': ['rec/server', 'dependees_must_have:rec/server'],
    'test/jvm/com/foursquare/rec/server': ['rec/server', 'dependees_must_have:rec/server'],
    'src/thrift/io/fsq': ['opensource', 'dependencies_must_have:opensource', 'fscommon'],
    'src/jvm/io/fsq': ['opensource', 'dependencies_must_have:opensource', 'fscommon'],
    'test/thrift/io/fsq': ['opensource', 'dependencies_must_have:opensource'],
    'test/jvm/io/fsq': ['opensource', 'dependencies_must_have:opensource'],
    'src/jvm/com/foursquare/checkin/server': ['checkin/server', 'dependees_must_have:checkin/server'],
    'src/jvm/com/foursquare/user/server': ['user/server', 'dependees_must_have:user/server'],
    'src/jvm/com/foursquare/venue/server': ['venue/server', 'dependees_must_have:venue/server'],
    'src/jvm/com/foursquare/apiserver/api2/json': ['api2_json'],
    'src/jvm/com/foursquare/apiserver/api2/endpoints': ['api2_endpoints'],
    'src/jvm/com/foursquare/hadoop': ['dependencies_cannot_have:api2_json', 'dependencies_cannot_have:api2_endpoints'],
  }

by_basename:  {
    'model': ['model', 'dependencies_cannot_have:concrete'],
    'concrete': ['concrete'],
  }

[cache.map-scala-exported-symbols]
read_from = %(all_artifact_caches)s
write_to = %(local_artifact_caches)s

[cache.map-scala-used-symbols]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s

[cache.map-soy-external-call-symbols]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s

[cache.map-third-party-jar-symbols]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s

[test-changed]
changes_since: origin/master
include_dependees: direct
# TODO(pl): DENORM_TODO(banned_expensive_targets)
exclude_target_regexp: [
    '3rdparty',
    'experimental',
    'oneoff',
    'src/jvm/com/foursquare/hadoop/hive/serde',
    'src/jvm/com/foursquare/hadoop/thriftmodelutil',
    '^verification'
  ]

[compile-changed]
changes_since: origin/master
include_dependees: direct
# TODO(pl): DENORM_TODO(banned_expensive_targets)
exclude_target_regexp: [
    '3rdparty',
    'experimental',
    'oneoff',
    'src/jvm/com/foursquare/hadoop/hive/serde',
    'src/jvm/com/foursquare/hadoop/thriftmodelutil',
    '^verification'
  ]

[hadoop-binary]
deployjar: True

[pom-resolve]
global_exclusions = [
    ('javax.jms', 'jms'),
    ('com.sun.jdmk', 'jmxtools'),
    ('com.sun.jmx', 'jmxri'),
    ('commons-logging', 'commons-logging'),
    ('org.slf4j', 'slf4j-log4j12'),
    ('org.slf4j', 'slf4j-jdk14'),
    ('org.slf4j', 'slf4j-simple'),
    ('log4j', 'log4j'),
    ('log4j', 'apache-log4j-extras'),
    ('thrift', 'libthrift'),
    ('tomcat', 'jasper-runtime'),

    # we want only the version of jetty that we explicitly include.
    ('org.mortbay.jetty', 'jetty'),
    ('org.mortbay.jetty', 'jetty-util'),

    # NOTE(jcrobak) if you need jruby then make sure to exclude it from the hbase jar.
    # The issue that caused this exclude was an out-of-date version of jodatime bundled
    # within jruby, manifesting as a compile error.
    ('org.jruby', 'jruby-complete'),

    # Exclude old Netty versions with different groupId/artifactId's.
    ('org.jboss.netty', 'netty'),

    # google collections was renamed guava, and has the same package declarations.
    ('com.google.collections', 'google-collections'),

    # NOTE(pl): A transitive dependency of scalding-{core,commons} pulls in
    # org.ow2.asm/asm-4.0, which has a different organization than the 3.x
    # asm versions and thus gets pulled in alongside asm-3.x.
    # This causes an order-dependent classpath conflict which in turn
    # interferes with reflection in hadoop classloading tests.
    ('org.ow2.asm', 'asm'),
    ('org.ow2.asm', 'asm-commons'),

    # For some reason, the 2.8.0 version of this gets pulled in in addition to the 2.10 version.
    ('org.apache.kafka', 'kafka_2.8.0'),

    # google-api-client has a dependency on an old version of guava under a
    # slightly different name, guava-jdk5. :(
    ('com.google.guava', 'guava-jdk5'),

    # Some dependency of Spark brings in this "orbit" packaged javax.servlet
    # dep. The "orbit" packaging crashes pom-resolve currently. Since it is
    # unnecessary for operation of foursquare.web/Spark, exclude it.
    ('org.eclipse.jetty.orbit', 'javax.servlet'),

    # Lots of things depend on these, but they are MR1 so we should avoid them.
    # They should be subsumed by the replacements in hadoop-common
    # and hadoop-mapreduce-client-core
    ('org.apache.hadoop', 'hadoop-client'),
    ('org.apache.hadoop', 'hadoop-core'),
  ]

global_pinned_versions = {
    ('asm', 'asm'): '3.3.1',
    ('asm', 'asm-commons'): '3.3.1',
    ('asm', 'asm-tree'): '3.3.1',
    ('asm', 'asm-util'): '3.3.1',
    ('com.fasterxml.jackson.core', 'jackson-annotations'): '2.4.2',
    ('com.fasterxml.jackson.core', 'jackson-core'): '2.4.2',
    ('com.fasterxml.jackson.core', 'jackson-databind'): '2.4.2',
    ('com.google.code.findbugs', 'jsr305'): '2.0.3',
    ('com.google.code.gson', 'gson'): '2.2.2',
    ('com.googlecode.javaewah', 'JavaEWAH'): '0.6.6',
    ('com.hadoop.gplcompression', 'hadoop-lzo'): '0.4.19',
    ('com.sun.jersey', 'jersey-core'): '1.9',
    ('com.sun.jersey', 'jersey-server'): '1.9',
    ('com.sun.xml.bind', 'jaxb-impl'): '2.2.3-1',
    ('com.thoughtworks.paranamer', 'paranamer'): '2.6',
    ('com.twitter', 'chill_2.10'): '0.5.2',
    ('com.twitter', 'chill-java'): '0.5.2',
    ('com.twitter', 'util-core_2.10'): '6.24.0',
    ('com.twitter', 'util-jvm_2.10'): '6.24.0',
    ('com.twitter', 'util-logging_2.10'): '6.24.0',
    ('com.twitter.common', 'application-action'): '0.0.66',
    ('com.twitter.common', 'args'): '0.2.6',
    ('com.twitter.common', 'args-apt'): '0.1.6',
    ('com.twitter.common', 'args-core'): '0.1.7',
    ('com.twitter.common', 'base'): '0.0.82',
    ('com.twitter.common', 'collections'): '0.0.69',
    ('com.twitter.common', 'dynamic-host-set'): '0.0.41',
    ('com.twitter.common', 'io'): '0.0.51',
    ('com.twitter.common', 'io-json'): '0.0.39',
    ('com.twitter.common', 'io-thrift'): '0.0.48',
    ('com.twitter.common', 'net-util'): '0.0.76',
    ('com.twitter.common', 'quantity'): '0.0.66',
    ('com.twitter.common', 'service-thrift'): '1.0.42',
    ('com.twitter.common', 'stat'): '0.0.26',
    ('com.twitter.common', 'util'): '0.0.92',
    ('com.twitter.common', 'util-system-mocks'): '0.0.67',
    ('com.twitter.common.zookeeper', 'client'): '0.0.53',
    ('com.twitter.common.zookeeper', 'group'): '0.0.67',
    ('com.twitter.common.zookeeper', 'server-set'): '1.0.72',
    ('com.twitter', 'scrooge-core_2.10'): '3.12.3',
    ('com.yammer.metrics', 'metrics-core'): '2.2.0',
    ('commons-beanutils', 'commons-beanutils'): '1.8.3',
    ('commons-codec', 'commons-codec'): '1.6',
    ('commons-pool', 'commons-pool'): '1.6',
    ('hsqldb', 'hsqldb'): '1.8.0.10',
    ('javax.servlet', 'servlet-api'): '2.5',
    ('javax.xml.bind', 'jaxb-api'): '2.2.2',
    ('jaxen', 'jaxen'): '1.1.4',
    ('org.antlr', 'antlr-runtime'): '3.5',
    ('org.apache.avro', 'avro'): '1.7.4',
    ('org.apache.geronimo.specs', 'geronimo-activation_1.1_spec'): '1.1',
    ('org.apache.httpcomponents', 'httpcore'): '4.3.2',
    ('org.apache.commons', 'commons-math3'): '3.4.1',
    ('org.apache.mina', 'mina-core'): '2.0.0-M5',
    ('org.apache.pig', 'pig'): '0.11.0-cdh4.4.0',
    ('org.fusesource.jansi', 'jansi'): '1.9',
    ('org.hamcrest', 'hamcrest-core'): '1.2',
    ('org.javassist', 'javassist'): '3.18.1-GA',
    ('org.scalamacros', 'quasiquotes_2.10'): '2.0.1',
    ('org.tukaani', 'xz'): '1.0',
    ('xerces', 'xercesImpl'): '2.8.1',
    ('xml-apis', 'xml-apis'): '1.3.04',

    ('org.apache.ftpserver', 'ftpserver-core'): '1.0.0',
    ('org.codehaus.jackson', 'jackson-jaxrs'): '1.8.8',
    ('org.apache.ftpserver', 'ftplet-api'): '1.0.0',

    # Make sure we always pin to the correct minor version of scala provided deps.
    ('org.scala-lang', 'jline'): '2.10.4',
    ('org.scala-lang', 'scala-actors'): '2.10.4',
    ('org.scala-lang', 'scala-compiler'): '2.10.4',
    ('org.scala-lang', 'scala-library'): '2.10.4',
    ('org.scala-lang', 'scala-reflect'): '2.10.4',
    ('org.scala-lang', 'scalap'): '2.10.4',

    ('org.apache.velocity', 'velocity'): '1.7',
    ('com.sun.jersey', 'jersey-json'): '1.14',
    ('org.codehaus.jackson', 'jackson-jaxrs'): '1.9.2',
    ('org.codehaus.jackson', 'jackson-jaxrs'): '1.9.2',
    ('org.apache.hadoop', 'hadoop-common'): '2.6.0-cdh5.4.3',
    ('org.apache.hadoop', 'hadoop-hdfs'): '2.6.0-cdh5.4.3',
    ('org.apache.hadoop', 'hadoop-annotations'): '2.6.0-cdh5.4.3',
    # commons-daemon 1.0.3 has a malformed pom file, causing resolution errors
    ('commons-daemon', 'commons-daemon'): '1.0.9',
    ('com.google.protobuf', 'protobuf-java'): '2.5.0',

    ('org.codehaus.janino', 'commons-compiler'): '2.7.8',
    ('org.apache.geronimo.specs', 'geronimo-jta_1.1_spec'): '1.1.1',

  }

# For advanced users, if you are testing new jars built entirely locally, add the jar coordinates to this
# map with the local file location where the override jar lives.
local_override_versions = {
    # Example:
    # ('com.foursquare', 'spindle-runtime_2.10', '3.0.0-M7'): '/path/to/artifact.jar'
  }


[cache.pom-resolve]
write_to: %(local_artifact_caches)s
read_from: %(all_artifact_caches)s
